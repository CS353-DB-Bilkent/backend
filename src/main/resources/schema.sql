-- noinspection SqlNoDataSourceInspectionForFile

-- DROP TABLE IF EXISTS users CASCADE; -- remove this once we have data to work with :)
-- DROP TABLE IF EXISTS tickets CASCADE; -- remove this once we have data to work with :)
-- DROP TABLE IF EXISTS wallets CASCADE; -- remove this once we have data to work with :)
-- DROP TABLE IF EXISTS transactions CASCADE; -- remove this once we have data to work with :)

-- combine all the users into one schema, differentiate via role. This way, it's easier to manage in code and we are not
-- building the next facebook, so who cares.

CREATE TABLE IF NOT EXISTS USERS (
    USER_ID SERIAL PRIMARY KEY,
    NAME VARCHAR(128) NOT NULL,
    ROLE VARCHAR(128) NOT NULL,
    EMAIL VARCHAR(128) UNIQUE NOT NULL,
    PASSWORD VARCHAR(512) NOT NULL,
    PHONE VARCHAR(15),
    BIRTH_DATE DATE NOT NULL,
    REGISTERED_DATE DATE NOT NULL,
    BALANCE DECIMAL(10,2),
    COMPANY_NAME VARCHAR(255),
    IBAN VARCHAR(34),
    SALARY DECIMAL(10,2)
);

CREATE TABLE IF NOT EXISTS EVENT (
    EVENT_ID SERIAL PRIMARY KEY,
    NAME VARCHAR(128) NOT NULL,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    DETAILS VARCHAR(500) NOT NULL,
    TICKET_PRICE DECIMAL(10,2) NOT NULL,
    EVENT_TYPE VARCHAR(50) NOT NULL,
    MIN_AGE_ALLOWED INT NOT NULL,
    NUMBER_OF_TICKETS INT NOT NULL,
    EVENT_STATUS VARCHAR(50),
    ORGANIZER_ID INT REFERENCES USERS(USER_ID)
);

CREATE TABLE IF NOT EXISTS VENUE (
    VENUE_ID SERIAL PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    CAPACITY INT NOT NULL,
    CITY INT NOT NULL,
    ADDRESS TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS REVIEW (
    REVIEW_ID SERIAL PRIMARY KEY,
    RATING INT CHECK (RATING BETWEEN 1 AND 5),
    DESCRIPTION VARCHAR(255),
    REVIEW_DATE DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS REPORT (
    REPORT_ID SERIAL PRIMARY KEY,
    REPORT_DATE DATE NOT NULL,
    TOTAL_SALES INT NOT NULL,
    TOTAL_REVENUE DECIMAL(10,2) NOT NULL,
    ORGANIZER_ID INT REFERENCES USERS(USER_ID),
    EVENT_ID INT REFERENCES EVENT(EVENT_ID)
);

CREATE TABLE IF NOT EXISTS BRAND (
    BRAND_ID SERIAL PRIMARY KEY,
    BRAND_NAME VARCHAR(128) NOT NULL
);

CREATE TABLE IF NOT EXISTS EVENT_PERSON (
    EVENT_PERSON_ID SERIAL PRIMARY KEY,
    EVENT_PERSON_NAME VARCHAR(128) NOT NULL,
    EVENT_ID INT REFERENCES EVENT(EVENT_ID),
    BRAND_ID INT REFERENCES BRAND(BRAND_ID)
);

CREATE TABLE IF NOT EXISTS HOSTS (
    EVENT_PERSON_ID INT REFERENCES EVENT_PERSON(EVENT_PERSON_ID),
    EVENT_ID INT NOT NULL,
    BRAND_ID INT NOT NULL,
    PRIMARY KEY (EVENT_ID, BRAND_ID, EVENT_PERSON_ID),
    FOREIGN KEY (EVENT_ID) REFERENCES EVENT(EVENT_ID),
    FOREIGN KEY (BRAND_ID) REFERENCES BRAND(BRAND_ID)
);

CREATE TABLE IF NOT EXISTS TICKET (
    TICKET_ID SERIAL PRIMARY KEY,
    USER_ID INT REFERENCES USERS(USER_ID),
    EVENT_ID INT REFERENCES EVENT(EVENT_ID),
    PURCHASE_DATE DATE NOT NULL,
    PRICE DECIMAL(10,2) NOT NULL,
    TICKET_STATUS VARCHAR(50) NOT NULL,
    QR_CODE TEXT,
    BUYER_VISIBLE BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS TRANSACTION (
    TRANSACTION_ID SERIAL PRIMARY KEY,
    TRANSACTION_AMOUNT DECIMAL(10,2) NOT NULL,
    TRANSACTION_TYPE VARCHAR(50) NOT NULL,
    TRANSACTION_DATE DATE NOT NULL,
    USER_ID INT REFERENCES USERS(USER_ID),
    EVENT_ID INT REFERENCES EVENT(EVENT_ID)
);

-- CREATE TABLE BUYS (
--     USER_ID INT,
--     TICKET_ID INT,
--     PRIMARY KEY (USER_ID, TICKET_ID),
--     FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID),
--     FOREIGN KEY (TICKET_ID) REFERENCES TICKET(TICKET_ID)
-- );

CREATE TABLE IF NOT EXISTS NOTIFICATION (
    NOTIFICATION_ID SERIAL PRIMARY KEY,
    DESCRIPTION VARCHAR(255),
    NOTIFICATION_DATE DATE NOT NULL,
    VIEWED BOOLEAN NOT NULL,
    NOTIFICATION_TYPE VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS NOTIFIED (
    NOTIFICATION_ID INT,
    USER_ID INT,
    EVENT_ID INT,
    PRIMARY KEY (NOTIFICATION_ID, USER_ID, EVENT_ID),
    FOREIGN KEY (NOTIFICATION_ID) REFERENCES NOTIFICATION(NOTIFICATION_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (EVENT_ID) REFERENCES EVENT(EVENT_ID)
);
